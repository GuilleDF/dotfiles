package ia;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

/**
 * Created by gdefermin on 12/9/15.
 */
public class Main {
    private static double lats[],longs[];
    public static Graph<String> map;

    public static void run() {

    }

    private static HashMap<Integer, Node> nodes = new HashMap<>();

    public static void initGraph() {
        map = new Graph<>();
        lats = new double[71];
        longs = new double[71];

        BufferedReader in,in2,in3;
        try {
            in = new BufferedReader(new FileReader("res/raw/stations_separated.txt"));
            String line;
            while ((line = in.readLine()) != null) {
                map.addVertex(line);
            }

            in2 = new BufferedReader(new FileReader("res/raw/lat_coord_sep.txt"));
            in3 = new BufferedReader(new FileReader("res/raw/long_coord_sep.txt"));
            int i=0;
            while ((line = in2.readLine()) != null) {
                lats[i] = Double.parseDouble(line);
                line = in3.readLine();
                longs[i] = Double.parseDouble(line);
                i++;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        //LINEA E
        map.setWeight(14, 24, 2);
        map.setWeight(24, 57, 3);
        map.setWeight(57, 25, 2);
        map.setWeight(25, 17, 1);
        map.setWeight(17, 26, 2);
        map.setWeight(26, 34, 3);
        map.setWeight(34, 39, 3);
        map.setWeight(39, 40, 3);
        map.setWeight(40, 2, 2);
        map.setWeight(2, 45, 3);
        map.setWeight(45, 30, 2);
        map.setWeight(30, 31, 1);
        map.setWeight(31, 6, 3);
        map.setWeight(6, 68, 2); //hecho
        map.setWeight(68, 53, 1); //hecho
        map.setWeight(53, 65, 1); //hecho
        map.setWeight(65, 27, 2); //hecho


        //Linea B
        map.setWeight(32, 12, 2);
        map.setWeight(12, 1, 1);
        map.setWeight(1, 33, 2);
        map.setWeight(33, 21, 1);
        map.setWeight(21, 19, 2);
        map.setWeight(48, 66, 3); //hecho
        map.setWeight(5, 62, 2); //hecho
        map.setWeight(62, 16, 1); //hecho
        map.setWeight(69, 29, 2); //hecho
        map.setWeight(66, 23,2 );//hecho

        //LINEA C
        map.setWeight(11, 7, 1);
        map.setWeight(7, 51, 1);
        map.setWeight(67, 8, 3); //hecho
        //map.setWeight(51, 23, 2);
        map.setWeight(23, 58, 2);
        map.setWeight(58, 18, 1);
        map.setWeight(18, 36, 2);
        map.setWeight(36, 5, 1);
        map.setWeight(5, 63, 2); //hecho
        map.setWeight(63, 16, 1); //hecho
        map.setWeight(16, 15, 1);
        map.setWeight(15, 9, 2);
        map.setWeight(9, 13, 1);
        map.setWeight(13, 29, 2);
        map.setWeight(29, 70, 3); //hecho
        map.setWeight(70, 37, 2); //hecho
        map.setWeight(37, 54, 2);
        map.setWeight(54, 56, 2);
        map.setWeight(56, 38, 3);
        map.setWeight(38, 55, 3);
        map.setWeight(55, 22, 1);
        map.setWeight(22, 60, 2);
        map.setWeight(60, 52, 2);
        map.setWeight(52, 20, 2);
        map.setWeight(20, 10, 2);
        map.setWeight(67, 23 , 3);//hecho
        map.setWeight(67, 51 , 3);//hecho


        //LÃ­nea D
        map.setWeight(47, 53, 1); //hecho
        map.setWeight(53, 64, 1); //hecho
        map.setWeight(64, 27, 2); //hecho
        map.setWeight(27, 59, 1);
        map.setWeight(59, 44, 2);
        map.setWeight(44, 28, 1);
        map.setWeight(28, 61, 3);
        map.setWeight(61, 50, 2);
        map.setWeight(50, 43, 6);
        map.setWeight(43, 41, 2);
        map.setWeight(41, 55, 2);

        //Linea A
        map.setWeight(4, 46, 1);
        map.setWeight(46, 19, 2);
        map.setWeight(19, 0, 1);
        map.setWeight(0, 35, 2);
        map.setWeight(35, 42, 1);
        map.setWeight(42, 48, 2);
        map.setWeight(48, 8, 3); //hecho
        map.setWeight(5, 3, 2); //hecho
        map.setWeight(3, 16, 1); //hecho
        map.setWeight(8,23,  3);//hecho
        map.setWeight(49, 29, 2);//hecho

        //TRANSBORDOS
        final int T_TRANS=4;

        map.setWeight(3, 62, T_TRANS);
        map.setWeight(3, 63, T_TRANS);
        map.setWeight(3, 64, T_TRANS);
        map.setWeight(3, 65, T_TRANS);

        map.setWeight(8, 66, T_TRANS);
        map.setWeight(8, 67, T_TRANS);

        map.setWeight(47, 68, T_TRANS);

        map.setWeight(49, 69, T_TRANS);
        map.setWeight(49, 70, T_TRANS);


        System.out.println(map);

    }

    public static List<Integer> getPath(String from, String to) {
        return getPath(map.getId(from), map.getId(to));
    }


    public static List<Integer> getPath(int from, int to) {
        Node source = new Node();
        source.id = from;

        Node dest = new Node();
        dest.id = to;

        List<Node> explored = new ArrayList<>();

        PriorityQueue<Node> queue = new PriorityQueue<>(80, (Comparator<Node>) (i, j) -> {
            if (i.f > j.f) {
                return 1;
            } else if (i.f < j.f) {
                return -1;
            } else {
                return 0;
            }
        });

        //cost from start
        source.g = 0;
        source.f = getH(source.id, dest.id);

        queue.add(source);

        while (!queue.isEmpty()) {

            //the node in having the lowest f_score value
            Node current = queue.poll();

            System.out.println("Current node: " + map.getVertex(current.id) + " (" + current.id + ") ");

            explored.add(current);

            //goal found
            if (current.id == dest.id) {
                dest.parent = current.parent;
                break;
            }

            //check every child of current node
            for (Graph.Edge edge : map.getWeights(current.id)) {
                //System.out.println("Arista: " + map.getVertex(ch_id) + "; Weight: " + weight);
                Node child = nodes.get(edge.v2);
                if (child == null) {
                    child = new Node();
                    child.id = edge.v2;
                }
                System.out.println("Current child: " + map.getVertex(child.id) + " (" + child.id + ") ");
                double cost = edge.weight;
                double temp_g = current.g + cost;
                double temp_f = temp_g + getH(child.id, dest.id);


                                /*if child node has been evaluated and
                                the newer f_score is higher, skip*/
                if (explored.contains(child)) {
                    continue;
                }


                                /*else if child node is not in queue or
                                newer f_score is lower*/

                else if (!queue.contains(child)) {
                    queue.add(child);
                } else if (temp_g >= child.g) {
                    continue;
                }

                child.parent = current;
                child.g = temp_g;
                child.f = temp_f;
                nodes.put(child.id, child);

            }

        }
        List<Integer> path = new ArrayList<>();
        for(Node node = dest; node!=null; node = node.parent) {
            path.add(node.id);
        }
        Collections.reverse(path);

        return path;
    }

    public static double getH(int v1, int v2) {
        return Utils.getDistanceMin(lats[v1],longs[v1],lats[v2],longs[v2]);
    }

    public static class Node {
        public int id;
        public Node parent;

        public double f;
        public double g;

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof Node)) {
                return false;
            }
            else {
                return ((Node) o).id == id;
            }
        }

        public Node(){}
    }
}
