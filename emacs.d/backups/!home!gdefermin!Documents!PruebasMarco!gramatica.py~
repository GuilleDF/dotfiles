f = open('gramatica','r')
rules = {}
for line in f:
    line = line.replace("\n","")
    parts = line.split(" -> ")
#    print(parts)
    p2 = parts[1].split("|")
    i=0
    for p in p2:
        p2[i] = p.split(" ")
        p2[i] = [val for val in p2[i] if val != "" and val != "lambda"] # remove "" and "lambda"
        i+=1
    rules[parts[0].replace(" ","")] = p2
#print(rules)
f.close()

conjuntos = []
conjuntos.append(rules)

toInspect = []
toInspect.append(rules)

while ( False ):
    res = []
    
    #t = toInspect[0]
    if(len(toInspect)==0):
        break
    #toInspect.remove(t)
    conjuntos.append(res)

def cierre(items):
    result = dict(items)
    aux = dict(items)

    explored = []
    aux_explored = []
    done_something = True
    while(done_something):
        done_something = False
        for key in result.keys():
            if(key in explored):
                break
            done_something = True
            aux_explored.append(key)
            for item in result[key]:
                index = item.index(".")
                if(index < len(item) and item[index].isupper()):
                    for rule in rules[item[index]]:
                        r = list(rule)
                        r.insert(0,".")
                        if(item[index] in aux.keys()):
                            if(r not in aux[item[index]]):
                                aux[item[index]].append(r)
                        else:
                            aux[item[index]] = [r]
                        
        explored = list(aux_explored)
        result = dict(aux)
    
    return result

def goto(items, symbol):
    result = {}
    i=0
    for a in items.values():
        for b in a:
            index = b.index(".")
            if(b[index+1] != symbol):
                break
            c = list(b)
            c.remove(".")
            c.insert(index+1,".")
            key = list(items.keys())[i]
            if(key in result.keys()):
                result[key].append(c)
            else:
                result[key] = [c]
        i+=1
    return cierre(result)

item = {}
item["P'"] = [[".","P"]]
print(cierre(item))
#print(goto(cierre(item), "B"))


