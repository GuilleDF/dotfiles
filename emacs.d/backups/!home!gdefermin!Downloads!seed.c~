
#include <openssl/conf.h>
#include <openssl/evp.h>
#include <openssl/err.h>
#include <string.h>



void handleErrors(void)
{
  ERR_print_errors_fp(stderr);
  abort();
}

/*---------------------------------------------------------------------------------*/
/*----------------------------------------INIT-------------------------------------*/
/*---------------------------------------------------------------------------------*/
int main (void){

	int tam_text=16;
  /* A 256 bit key */
  unsigned char *key = (unsigned char *)"0123012301230123";

  /* A 128 bit IV */
  unsigned char *iv = (unsigned char *)"0123012301230123";

  /* Message to be encrypted */
  unsigned char plaintext[tam_text];
	RAND_bytes(plaintext, tam_text); 
	BIO_dump_fp (stdout, (const char *)plaintext	, tam_text);
	printf("----------------------\n");

  /* Buffer for ciphertext. Ensure the buffer is long enough for the
   * ciphertext which may be longer than the plaintext, dependant on the
   * algorithm and mode
   */
  unsigned char ciphertext[tam_text];

  /* Buffer for the decrypted text */
  unsigned char decryptedtext[tam_text];

  int decryptedtext_len, ciphertext_len;

  /* Initialise the library */
  ERR_load_crypto_strings();
  OpenSSL_add_all_algorithms();
  OPENSSL_config(NULL);

  /* Encrypt the plaintext */
printf("TAMAÃ‘O: %d",tam_text);
  ciphertext_len = encrypt (plaintext, tam_text, key, iv, ciphertext);



  /* Do something useful with the ciphertext here */
  printf("Ciphertext is:\n");
 //printf("NUMEROOOOO: %d",ciphertext_len);
  BIO_dump_fp (stdout, (const char *)ciphertext, ciphertext_len); //ciphertext_len



/* Decrypt the ciphertext */
  decryptedtext_len = decrypt(ciphertext, ciphertext_len, key, iv,decryptedtext);

  /* Add a NULL terminator. We are expecting printable text */
  decryptedtext[decryptedtext_len] = '\0';

  /* Show the decrypted text */
  printf("Decrypted text is:\n");
  printf("%s\n", decryptedtext);



  /* Clean up */
  EVP_cleanup();
  ERR_free_strings();

  return 0;
}
/*---------------------------------------------------------------------------------*/
/*---------------------------------------CIFRADO-----------------------------------*/
/*---------------------------------------------------------------------------------*/

int encrypt(unsigned char *plaintext, int plaintext_len, unsigned char *key,
  unsigned char *iv, unsigned char *ciphertext){
  EVP_CIPHER_CTX *ctx;

  int len;
	printf("LONGITUD TEXTO%d\n",plaintext_len);
	BIO_dump_fp (stdout, (const char *)plaintext, 16);
	

  int ciphertext_len;

  /* Create and initialise the context */
  if(!(ctx = EVP_CIPHER_CTX_new())) handleErrors();

printf("LONGITUDDDDDDDDD1: %d\n",ciphertext_len);
  /* Initialise the encryption operation. IMPORTANT - ensure you use a key
   * and IV size appropriate for your cipher
   * In this example we are using 256 bit AES (i.e. a 256 bit key). The
   * IV size for *most* modes is the same as the block size. For AES this
   * is 128 bits */
  if(1 != EVP_EncryptInit_ex(ctx, EVP_seed_cbc(), NULL, key, iv))
    handleErrors();

printf("LONGITUDDDDDDDDD2: %d\n",ciphertext_len);
  /* Provide the message to be encrypted, and obtain the encrypted output.
   * EVP_EncryptUpdate can be called multiple times if necessary
   */
  if(1 != EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plaintext_len))
    handleErrors();
  ciphertext_len = len;

printf("LONGITUDDDDDDDDD3: %d\n",ciphertext_len);
  /* Finalise the encryption. Further ciphertext bytes may be written at
   * this stage.
   */
 EVP_CIPHER_CTX_set_padding(ctx, 0);
/*
  if(1 != EVP_EncryptFinal_ex(ctx, ciphertext + len, &len)) handleErrors();
  ciphertext_len += len;
*/
  /* Clean up */
  EVP_CIPHER_CTX_free(ctx);

printf("---------------------------\n");
printf("LONGITUDDDDDDDDD4: %d\n",ciphertext_len);
BIO_dump_fp (stdout, (const char *)ciphertext, 16);

  return ciphertext_len;
}
/*---------------------------------------------------------------------------------*/
/*--------------------------------------DESCIFRADO----------------------------------*/
/*---------------------------------------------------------------------------------*/

	int decrypt(unsigned char *ciphertext, int ciphertext_len, unsigned char *key,
	  unsigned char *iv, unsigned char *plaintext)
	{
	  EVP_CIPHER_CTX *ctx;

	  int len;
	  int plaintext_len;


	
		
	  /* Create and initialise the context */
	  if(!(ctx = EVP_CIPHER_CTX_new())) handleErrors();

	  /* Initialise the decryption operation. IMPORTANT - ensure you use a key
	   * and IV size appropriate for your cipher
	   * In this example we are using 256 bit AES (i.e. a 256 bit key). The
	   * IV size for *most* modes is the same as the block size. For AES this
	   * is 16 bits */
	  if(1 != EVP_DecryptInit_ex(ctx, EVP_seed_cbc(), NULL, key, iv))
	    handleErrors();

	  /* Provide the message to be decrypted, and obtain the plaintext output.
	   * EVP_DecryptUpdate can be called multiple times if necessary
	   */
	  if(1 != EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ciphertext_len))
	    handleErrors();
	  plaintext_len = len;

	  /* Finalise the decryption. Further plaintext bytes may be written at
	   * this stage.
	   */
	  if(1 != EVP_DecryptFinal_ex(ctx, plaintext + len, &len)) handleErrors();
	  plaintext_len += len;

	  /* Clean up */
	  EVP_CIPHER_CTX_free(ctx);
	printf("%d\n", len);
	printf("%d\n", plaintext_len);
        printf("%d\n", ciphertext_len);
	  return plaintext_len;
	}


