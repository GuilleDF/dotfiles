f = open('gramatica.txt','r')
rules = {}
for line in f:
    line = line.replace("\n","")
    parts = line.split(" -> ")
#    print(parts)
    p2 = parts[1].split("|")
    i=0
    for p in p2:
        p2[i] = p.split(" ")
        p2[i] = [val for val in p2[i] if val != "" and val != "lambda"] # remove "" and "lambda"
        i+=1
    rules[parts[0].replace(" ","")] = p2
#print(rules)
f.close()


def cierre(items):
    result = dict(items)
    aux = dict(items)

    explored = []
    aux_explored = []
    done_something = True
    while(done_something):
        done_something = False
        for key in result:
            if(key in explored):
                continue
            aux_explored.append(key)
            for item in result[key]:
                index = item.index(".") + 1
                if(index < len(item) and item[index].isupper()):
                    for rule in rules[item[index]]:
                        r = list(rule)
                        r.insert(0,".")
                        if(item[index] in aux.keys()):
                            if(r not in aux[item[index]]):
                                aux[item[index]].append(r)
                        else:
                            aux[item[index]] = [r]
                            done_something = True
                        
        explored = list(aux_explored)
        result = dict(aux)
    
    return result

def goto(items, symbol):
    result = {}
    i=0
    for a in items.values():
        for b in a:
            index = b.index(".")
            if(index+1 == len(b) or b[index+1] != symbol):
                continue
            c = list(b)
            c.remove(".")
            c.insert(index+1,".")
            key = list(items.keys())[i]
            if(key in result.keys()):
                result[key].append(c)
            else:
                result[key] = [c]
        i+=1
    return cierre(result)

# f = open("symbols.txt","r")
# symbols = []
# for line in f:
#     line = line.replace("\n","")
#     symbols.append(line)
# f.close()
    
# item = {}
# item["P'"] = [[".","P"]]
# collection = []
# i0 = cierre(item)
# collection.append(i0)

i=0
while(i<len(collection)):
    #print("State:", i)
    #print("\t", collection[i])
    for sym in symbols:
        next_state = goto(collection[i],sym)
        if(next_state != {} and next_state not in collection):
            collection.append(next_state)
    i+=1


def first(symlist):
    if(symlist == []):
        return ["lambda"]
    res = []
    i=0
    finished = False
    while not finished:
        finished = True
        if i == len(symlist):
            res.append("lambda")
            break
        if not symlist[i].isupper():
            res.append(symlist[i])
            return res
        for rule in rules[symlist[i]]:
            for sym in first(rule):
                if sym not in res:
                    res.append(sym)
            if "lambda" in res:
                res.remove("lambda")
                finished = False
        i+=1
    return res

def follow(symbol):
    res = []
    for key in rules:
        for rule in rules[key]:
            i=0
            for sym in rule:
                if sym == symbol:
                    break
                i+=1
            if i == len(rule):
                continue
            if i == len(rule)-1:
                if key == symbol:
                    continue
                for sym in follow(key):
                    if sym not in res:
                        res.append(sym)
            else:
                f = first(rule[i+1:])
                if "lambda" in f:
                    f.remove("lambda")
                    for sym in follow(key):
                        if sym not in res:
                            res.append(sym)
                for sym in f:
                    if sym not in res:
                        res.append(sym)
    return res

def accion(state, symbol):
    if(symbol.isupper()):
        goto_state = goto(collection[state], sym)
        i=0
        for s in collection:
            if(s == goto_state):
                break
            i+=1
        return i
    else:
        for key in collection[state]:
            for item in collection[state][key]:
                i=0
                for sym in item:
                    if sym == ".":
                        break
                    i+=1
#                if i == len(item)-1:
                   #reducir
#                else:
#                    if item[i+1] != symbol:
 #                       continue
                    #desplazar
